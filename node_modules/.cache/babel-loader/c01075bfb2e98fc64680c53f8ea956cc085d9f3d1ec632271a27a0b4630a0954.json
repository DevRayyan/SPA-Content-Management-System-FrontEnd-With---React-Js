{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, LinkAuthenticationElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nexport default function CheckoutForm() {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n\n  //   const [email, setEmail] = useState('');\n  //   const [message, setMessage] = useState(null);\n  //   const [isLoading, setIsLoading] = useState(false);\n\n  //   useEffect(() => {\n  //     if (!stripe) {\n  //       return;\n  //     }\n\n  //     const clientSecret = new URLSearchParams(window.location.search).get(\n  //       \"payment_intent_client_secret\"\n  //     );\n\n  //     if (!clientSecret) {\n  //       return;\n  //     }\n\n  //     stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n  //       switch (paymentIntent.status) {\n  //         case \"succeeded\":\n  //           setMessage(\"Payment succeeded!\");\n  //           break;\n  //         case \"processing\":\n  //           setMessage(\"Your payment is processing.\");\n  //           break;\n  //         case \"requires_payment_method\":\n  //           setMessage(\"Your payment was not successful, please try again.\");\n  //           break;\n  //         default:\n  //           setMessage(\"Something went wrong.\");\n  //           break;\n  //       }\n  //     });\n  //   }, [stripe]);\n\n  //   const handleSubmit = async (e) => {\n  //     e.preventDefault();\n\n  //     if (!stripe || !elements) {\n  //       // Stripe.js hasn't yet loaded.\n  //       // Make sure to disable form submission until Stripe.js has loaded.\n  //       return;\n  //     }\n\n  //     setIsLoading(true);\n\n  //     const { error } = await stripe.confirmPayment({\n  //       elements,\n  //       confirmParams: {\n  //         // Make sure to change this to your payment completion page\n  //         return_url: \"http://localhost:3000\",\n  //       },\n  //     });\n\n  //     // This point will only be reached if there is an immediate error when\n  //     // confirming the payment. Otherwise, your customer will be redirected to\n  //     // your `return_url`. For some payment methods like iDEAL, your customer will\n  //     // be redirected to an intermediate site first to authorize the payment, then\n  //     // redirected to the `return_url`.\n  //     if (error.type === \"card_error\" || error.type === \"validation_error\") {\n  //       setMessage(error.message);\n  //     } else {\n  //       setMessage(\"An unexpected error occurred.\");\n  //     }\n\n  //     setIsLoading(false);\n  //   };\n\n  //   const paymentElementOptions = {\n  //     layout: \"tabs\"\n  //   }\n\n  //   return (\n  //     <form id=\"payment-form\" onSubmit={handleSubmit}>\n  //       <LinkAuthenticationElement\n  //         id=\"link-authentication-element\"\n  //         onChange={(e) => setEmail(e.target.value)}\n  //       />\n  //       <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n  //       <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n  //         <span id=\"button-text\">\n  //           {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n  //         </span>\n  //       </button>\n  //       {/* Show any error or success messages */}\n  //       {message && <div id=\"payment-message\">{message}</div>}\n  //     </form>\n  //   );\n}\n_s(CheckoutForm, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CheckoutForm;\nvar _c;\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"names":["React","useEffect","useState","PaymentElement","LinkAuthenticationElement","useStripe","useElements","CheckoutForm","_s","stripe","elements","_c","$RefreshReg$"],"sources":["C:/Users/JC/Documents/WebDevelopment/portfolio/src/Components/PaymentGatway/CheckoutForm.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  PaymentElement,\r\n  LinkAuthenticationElement,\r\n  useStripe,\r\n  useElements\r\n} from \"@stripe/react-stripe-js\";\r\n\r\nexport default function CheckoutForm() {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n//   const [email, setEmail] = useState('');\r\n//   const [message, setMessage] = useState(null);\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     if (!stripe) {\r\n//       return;\r\n//     }\r\n\r\n//     const clientSecret = new URLSearchParams(window.location.search).get(\r\n//       \"payment_intent_client_secret\"\r\n//     );\r\n\r\n//     if (!clientSecret) {\r\n//       return;\r\n//     }\r\n\r\n//     stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n//       switch (paymentIntent.status) {\r\n//         case \"succeeded\":\r\n//           setMessage(\"Payment succeeded!\");\r\n//           break;\r\n//         case \"processing\":\r\n//           setMessage(\"Your payment is processing.\");\r\n//           break;\r\n//         case \"requires_payment_method\":\r\n//           setMessage(\"Your payment was not successful, please try again.\");\r\n//           break;\r\n//         default:\r\n//           setMessage(\"Something went wrong.\");\r\n//           break;\r\n//       }\r\n//     });\r\n//   }, [stripe]);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     if (!stripe || !elements) {\r\n//       // Stripe.js hasn't yet loaded.\r\n//       // Make sure to disable form submission until Stripe.js has loaded.\r\n//       return;\r\n//     }\r\n\r\n//     setIsLoading(true);\r\n\r\n//     const { error } = await stripe.confirmPayment({\r\n//       elements,\r\n//       confirmParams: {\r\n//         // Make sure to change this to your payment completion page\r\n//         return_url: \"http://localhost:3000\",\r\n//       },\r\n//     });\r\n\r\n//     // This point will only be reached if there is an immediate error when\r\n//     // confirming the payment. Otherwise, your customer will be redirected to\r\n//     // your `return_url`. For some payment methods like iDEAL, your customer will\r\n//     // be redirected to an intermediate site first to authorize the payment, then\r\n//     // redirected to the `return_url`.\r\n//     if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n//       setMessage(error.message);\r\n//     } else {\r\n//       setMessage(\"An unexpected error occurred.\");\r\n//     }\r\n\r\n//     setIsLoading(false);\r\n//   };\r\n\r\n//   const paymentElementOptions = {\r\n//     layout: \"tabs\"\r\n//   }\r\n\r\n//   return (\r\n//     <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n//       <LinkAuthenticationElement\r\n//         id=\"link-authentication-element\"\r\n//         onChange={(e) => setEmail(e.target.value)}\r\n//       />\r\n//       <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\r\n//       <button disabled={isLoading || !stripe || !elements} id=\"submit\">\r\n//         <span id=\"button-text\">\r\n//           {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\r\n//         </span>\r\n//       </button>\r\n//       {/* Show any error or success messages */}\r\n//       {message && <div id=\"payment-message\">{message}</div>}\r\n//     </form>\r\n//   );\r\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SACEC,cAAc,EACdC,yBAAyB,EACzBC,SAAS,EACTC,WAAW,QACN,yBAAyB;AAEhC,eAAe,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACrC,MAAMC,MAAM,GAAGJ,SAAS,EAAE;EAC1B,MAAMK,QAAQ,GAAGJ,WAAW,EAAE;;EAEhC;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AAACE,EAAA,CA5FuBD,YAAY;EAAA,QACnBF,SAAS,EACPC,WAAW;AAAA;AAAAK,EAAA,GAFNJ,YAAY;AAAA,IAAAI,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}